// Constants

const int FCNPC_ENTITY_CHECK_NONE = 0;
const int FCNPC_ENTITY_CHECK_PLAYER = 1;
const int FCNPC_ENTITY_CHECK_NPC = 2;
const int FCNPC_ENTITY_CHECK_ACTOR = 4;
const int FCNPC_ENTITY_CHECK_VEHICLE = 8;
const int FCNPC_ENTITY_CHECK_OBJECT = 16;
const int FCNPC_ENTITY_CHECK_POBJECT_ORIG = 32;
const int FCNPC_ENTITY_CHECK_POBJECT_TARG = 64;
const int FCNPC_ENTITY_CHECK_MAP = 128;
const int FCNPC_ENTITY_CHECK_ALL = 255;

const int FCNPC_MOVE_TYPE_AUTO = -1;
const int FCNPC_MOVE_TYPE_WALK = 0;
const int FCNPC_MOVE_TYPE_RUN = 1;
const int FCNPC_MOVE_TYPE_SPRINT = 2;
const int FCNPC_MOVE_TYPE_DRIVE = 3;

const int FCNPC_MOVE_MODE_AUTO = -1;
const int FCNPC_MOVE_MODE_NONE = 0;
const int FCNPC_MOVE_MODE_MAPANDREAS = 1;
const int FCNPC_MOVE_MODE_COLANDREAS = 2;

const int FCNPC_MOVE_PATHFINDING_AUTO = -1;
const int FCNPC_MOVE_PATHFINDING_NONE = 0;
const int FCNPC_MOVE_PATHFINDING_Z = 1;
const int FCNPC_MOVE_PATHFINDING_RAYCAST = 2;

const float FCNPC_MOVE_SPEED_AUTO = -1.0;
const float FCNPC_MOVE_SPEED_WALK = 0.1552086;
const float FCNPC_MOVE_SPEED_RUN = 0.56444;
const float FCNPC_MOVE_SPEED_SPRINT = 0.926784;

const int FCNPC_MAX_NODES = 64;

const int FCNPC_INVALID_MOVEPATH_ID = -1;
const int FCNPC_INVALID_RECORD_ID = -1;

// Callbacks

[callback] void FCNPC_OnCreate(int npcid);
[callback] void FCNPC_OnDestroy(int npcid);
[callback] void FCNPC_OnSpawn(int npcid);
[callback] void FCNPC_OnRespawn(int npcid);
[callback] void FCNPC_OnDeath(int npcid, int killerid, int reason);
[callback] bool FCNPC_OnUpdate(int npcid);

[callback] bool FCNPC_OnTakeDamage(int npcid, int issuerid, float amount, int weaponid, int bodypart);
[callback] void FCNPC_OnGiveDamage(int npcid, int damagedid, float amount, int weaponid, int bodypart);

[callback] void FCNPC_OnReachDestination(int npcid);

[callback] bool FCNPC_OnWeaponShot(int npcid, int weaponid, int hittype, int hitid, float fX, float fY, float fZ);
[callback] void FCNPC_OnWeaponStateChange(int npcid, int weapon_state);

[callback] bool FCNPC_OnStreamIn(int npcid, int forplayerid);
[callback] bool FCNPC_OnStreamOut(int npcid, int forplayerid);

[callback] void FCNPC_OnVehicleEntryComplete(int npcid, int vehicleid, int seatid);
[callback] void FCNPC_OnVehicleExitComplete(int npcid, int vehicleid);
[callback] bool FCNPC_OnVehicleTakeDamage(int npcid, int issuerid, int vehicleid, float amount, int weaponid, float fX, float fY, float fZ);

[callback] bool FCNPC_OnFinishPlayback(int npcid);

[callback] void FCNPC_OnFinishNode(int npcid, int nodeid);
[callback] bool FCNPC_OnFinishNodePoint(int npcid, int nodeid, int pointid);
[callback] bool FCNPC_OnChangeNode(int npcid, int newnodeid, int oldnodeid);

[callback] void FCNPC_OnFinishMovePath(int npcid, int pathid);
[callback] bool FCNPC_OnFinishMovePathPoint(int npcid, int pathid, int pointid);

[callback] void FCNPC_OnChangeHeightPos(int npcid, float newz, float oldz);

[native] bool FCNPC_GetPluginVersion([out] string version, int size);
[native] bool FCNPC_SetUpdateRate(int rate);
[native] int FCNPC_GetUpdateRate();
[native] bool FCNPC_SetTickRate(int rate);
[native] int FCNPC_GetTickRate();
[native] bool FCNPC_UseMoveMode(int mode, bool use = true);
[native] bool FCNPC_IsMoveModeUsed(int mode);
[native] bool FCNPC_UseMovePathfinding(int pathfinding, bool use = true);
[native] bool FCNPC_IsMovePathfindingUsed(int pathfinding);
[native] bool FCNPC_UseCrashLog(bool use = true);
[native] bool FCNPC_IsCrashLogUsed();

[native] int FCNPC_Create(string name);
[native] bool FCNPC_Destroy(int npcid);
[native] bool FCNPC_Spawn(int npcid, int skinid, float x, float y, float z);
[native] bool FCNPC_Respawn(int npcid);
[native] bool FCNPC_IsSpawned(int npcid);
[native] bool FCNPC_Kill(int npcid);

[native] bool FCNPC_IsDead(int npcid);
[native] bool FCNPC_IsValid(int npcid);
[native] bool FCNPC_IsStreamedIn(int npcid, int forplayerid);
[native] bool FCNPC_IsStreamedInForAnyone(int npcid);

[native] bool FCNPC_SetPosition(int npcid, float x, float y, float z);
[native] int FCNPC_GivePosition(int npcid, float x, float y, float z);
[native] bool FCNPC_GetPosition(int npcid, [out] float x, [out] float y, [out] float z);
[native] bool FCNPC_SetAngle(int npcid, float angle);
[native] float FCNPC_GiveAngle(int npcid, float angle);
[native] bool FCNPC_SetAngleToPos(int npcid, float x, float y);
[native] bool FCNPC_SetAngleToPlayer(int npcid, int playerid);
[native] float FCNPC_GetAngle(int npcid);
[native] bool FCNPC_SetQuaternion(int npcid, float w, float x, float y, float z);
[native] bool FCNPC_GiveQuaternion(int npcid, float w, float x, float y, float z);
[native] bool FCNPC_GetQuaternion(int npcid, [out] float w, [out] float x, [out] float y, [out] float z);
[native] bool FCNPC_SetVelocity(int npcid, float x, float y, float z, bool update_pos = false);
[native] bool FCNPC_GiveVelocity(int npcid, float x, float y, float z, bool update_pos = false);
[native] bool FCNPC_GetVelocity(int npcid, [out] float x, [out] float y, [out] float z);
[native] bool FCNPC_SetSpeed(int npcid, float speed);
[native] float FCNPC_GetSpeed(int npcid);
[native] bool FCNPC_SetInterior(int npcid, int interiorid);
[native] int FCNPC_GetInterior(int npcid);
[native] bool FCNPC_SetVirtualWorld(int npcid, int worldid);
[native] int FCNPC_GetVirtualWorld(int npcid);

[native] bool FCNPC_SetHealth(int npcid, float health);
[native] float FCNPC_GiveHealth(int npcid, float health);
[native] float FCNPC_GetHealth(int npcid);
[native] bool FCNPC_SetArmour(int npcid, float armour);
[native] float FCNPC_GiveArmour(int npcid, float armour);
[native] float FCNPC_GetArmour(int npcid);

[native] bool FCNPC_SetInvulnerable(int npcid, bool invulnerable = true);
[native] bool FCNPC_IsInvulnerable(int npcid);

[native] bool FCNPC_SetSkin(int npcid, int skinid);
[native] int FCNPC_GetSkin(int npcid);

[native] bool FCNPC_SetWeapon(int npcid, int weaponid);
[native] int FCNPC_GetWeapon(int npcid);
[native] bool FCNPC_SetAmmo(int npcid, int ammo);
[native] bool FCNPC_GiveAmmo(int npcid, int ammo);
[native] int FCNPC_GetAmmo(int npcid);
[native] bool FCNPC_SetAmmoInClip(int npcid, int ammo);
[native] bool FCNPC_GiveAmmoInClip(int npcid, int ammo);
[native] int FCNPC_GetAmmoInClip(int npcid);
[native] bool FCNPC_SetWeaponSkillLevel(int npcid, int skill, int level);
[native] bool FCNPC_GiveWeaponSkillLevel(int npcid, int skill, int level);
[native] int FCNPC_GetWeaponSkillLevel(int npcid, int skill);
[native] bool FCNPC_SetWeaponState(int npcid, int weaponstate);
[native] int FCNPC_GetWeaponState(int npcid);

[native] bool FCNPC_SetWeaponReloadTime(int npcid, int weaponid, int time);
[native] int FCNPC_GetWeaponReloadTime(int npcid, int weaponid);
[native] int FCNPC_GetWeaponActualReloadTime(int npcid, int weaponid);
[native] bool FCNPC_SetWeaponShootTime(int npcid, int weaponid, int time);
[native] int FCNPC_GetWeaponShootTime(int npcid, int weaponid);
[native] bool FCNPC_SetWeaponClipSize(int npcid, int weaponid, int size);
[native] int FCNPC_GetWeaponClipSize(int npcid, int weaponid);
[native] int FCNPC_GetWeaponActualClipSize(int npcid, int weaponid);
[native] bool FCNPC_SetWeaponAccuracy(int npcid, int weaponid, float accuracy);
[native] float FCNPC_GetWeaponAccuracy(int npcid, int weaponid);
[native] bool FCNPC_SetWeaponInfo(int npcid, int weaponid, int reload_time = -1, int shoot_time = -1, int clip_size = -1, float accuracy = 1.0);
[native] bool FCNPC_GetWeaponInfo(int npcid, int weaponid, [out] int reload_time = -1, [out] int shoot_time = -1, [out] int clip_size = -1, [out] float accuracy = 1.0);
[native] bool FCNPC_SetWeaponDefaultInfo(int weaponid, int reload_time = -1, int shoot_time = -1, int clip_size = -1, float accuracy = 1.0);
[native] bool FCNPC_GetWeaponDefaultInfo(int weaponid, [out] int reload_time = -1, [out] int shoot_time = -1, [out] int clip_size = -1, [out] float accuracy = 1.0);


[native] int FCNPC_SetKeys(int npcid, int ud_analog, int lr_analog, int keys);
[native] int FCNPC_GetKeys(int npcid, [out] int ud_analog, [out] int lr_analog, [out] int keys);

[native] int FCNPC_SetSpecialAction(int npcid, int actionid);
[native] int FCNPC_GetSpecialAction(int npcid);

[native] int FCNPC_SetAnimation(int npcid, int animationid, float fDelta = 4.1, int loop = 0, int lockx = 1, int locky = 1, int freeze = 0, int time = 1);
[native] int FCNPC_SetAnimationByName(int npcid, string name, float fDelta = 4.1, int loop = 0, int lockx = 1, int locky = 1, int freeze = 0, int time = 1);
[native] int FCNPC_ResetAnimation(int npcid);
[native] int FCNPC_GetAnimation(int npcid, [out] int animationid = 0, [out] float fDelta = 4.1, [out] int loop = 0, [out] int lockx = 1, [out] int locky = 1, [out] int freeze = 0, [out] int time = 1);
[native] int FCNPC_ApplyAnimation(int npcid, string animlib, string animname, float fDelta = 4.1, int loop = 0, int lockx = 1, int locky = 1, int freeze = 0, int time = 1);
[native] int FCNPC_ClearAnimations(int npcid);

/*
[native] int FCNPC_SetFightingStyle(npcid, style);
[native] int FCNPC_GetFightingStyle(npcid);

[native] int FCNPC_UseReloading(npcid, bool use = true);
[native] bool FCNPC_IsReloadingUsed(npcid);
[native] int FCNPC_UseInfiniteAmmo(npcid, bool use = true);
[native] bool FCNPC_IsInfiniteAmmoUsed(npcid);

[native] int FCNPC_GoTo(npcid, float x, float y, float z, type = FCNPC_MOVE_TYPE_AUTO, float speed = FCNPC_MOVE_SPEED_AUTO, mode = FCNPC_MOVE_MODE_AUTO, pathfinding = FCNPC_MOVE_PATHFINDING_AUTO, float radius = 0.0, bool set_angle = true, float min_distance = 0.0, stopdelay = 250);
[native] int FCNPC_GoToPlayer(npcid, playerid, type = FCNPC_MOVE_TYPE_AUTO, float speed = FCNPC_MOVE_SPEED_AUTO, mode = FCNPC_MOVE_MODE_AUTO, pathfinding = FCNPC_MOVE_PATHFINDING_AUTO, float radius = 0.0, bool set_angle = true, float min_distance = 0.0, float dist_check = 1.5, stopdelay = 250);
[native] int FCNPC_Stop(npcid);
[native] bool FCNPC_IsMoving(npcid);
[native] bool FCNPC_IsMovingAtPlayer(npcid, playerid);
[native] int FCNPC_GetDestinationPoint(npcid, [out] float x, [out] float y, [out] float z);

[native] int FCNPC_AimAt(npcid, float x, float y, float z, bool shoot = false, shoot_delay = -1, bool set_angle = true, float offset_from_x = 0.0, float offset_from_y = 0.0, float offset_from_z = 0.0, between_check_flags = FCNPC_ENTITY_CHECK_ALL);
[native] int FCNPC_AimAtPlayer(npcid, playerid, bool shoot = false, shoot_delay = -1, bool set_angle = true, float offset_x = 0.0, float offset_y = 0.0, float offset_z = 0.0, float offset_from_x = 0.0, float offset_from_y = 0.0, float offset_from_z = 0.0, between_check_flags = FCNPC_ENTITY_CHECK_ALL);
[native] int FCNPC_StopAim(npcid);
[native] int FCNPC_MeleeAttack(npcid, delay = -1, bool fightstyle = false);
[native] int FCNPC_StopAttack(npcid);
[native] bool FCNPC_IsAttacking(npcid);
[native] bool FCNPC_IsAiming(npcid);
[native] bool FCNPC_IsAimingAtPlayer(npcid, playerid);
[native] int FCNPC_GetAimingPlayer(npcid);
[native] bool FCNPC_IsShooting(npcid);
[native] bool FCNPC_IsReloading(npcid);
[native] int FCNPC_TriggerWeaponShot(npcid, weaponid, hittype, hitid, float x, float y, float z, bool is_hit = true, float offset_from_x = 0.0, float offset_from_y = 0.0, float offset_from_z = 0.0, between_check_flags = FCNPC_ENTITY_CHECK_ALL);
[native] int FCNPC_GetClosestEntityInBetween(npcid, float x, float y, float z, float range, between_check_flags = FCNPC_ENTITY_CHECK_ALL, [out] entity_id = -1, [out] entity_type = -1, [out] object_owner_id = INVALID_PLAYER_ID, [out] float point_x = 0.0, [out] float point_y = 0.0, [out] float point_z = 0.0);

[native] int FCNPC_EnterVehicle(npcid, vehicleid, seatid, type = FCNPC_MOVE_TYPE_WALK);
[native] int FCNPC_ExitVehicle(npcid);

[native] int FCNPC_PutInVehicle(npcid, vehicleid, seatid);
[native] int FCNPC_RemoveFromVehicle(npcid);
[native] int FCNPC_GetVehicleID(npcid);
[native] int FCNPC_GetVehicleSeat(npcid);
[native] int FCNPC_UseVehicleSiren(npcid, bool use = true);
[native] bool FCNPC_IsVehicleSirenUsed(npcid);
[native] int FCNPC_SetVehicleHealth(npcid, float health);
[native] float FCNPC_GetVehicleHealth(npcid);
[native] int FCNPC_SetVehicleHydraThrusters(npcid, direction);
[native] int FCNPC_GetVehicleHydraThrusters(npcid);
[native] int FCNPC_SetVehicleGearState(npcid, gear_state);
[native] int FCNPC_GetVehicleGearState(npcid);

[native] int FCNPC_SetSurfingOffsets(npcid, float x, float y, float z);
[native] int FCNPC_GiveSurfingOffsets(npcid, float x, float y, float z);
[native] int FCNPC_GetSurfingOffsets(npcid, [out] float x, [out] float y, [out] float z);
[native] int FCNPC_SetSurfingVehicle(npcid, vehicleid);
[native] int FCNPC_GetSurfingVehicle(npcid);
[native] int FCNPC_SetSurfingObject(npcid, objectid);
[native] int FCNPC_GetSurfingObject(npcid);
[native] int FCNPC_SetSurfingPlayerObject(npcid, objectid);
[native] int FCNPC_GetSurfingPlayerObject(npcid);
[native] int FCNPC_StopSurfing(npcid);

[native] int FCNPC_StartPlayingPlayback(npcid, const file[] = "", recordid = FCNPC_INVALID_RECORD_ID, bool auto_unload = false, float delta_x = 0.0, float delta_y  = 0.0, float delta_z  = 0.0, float delta_qw = 0.0, float delta_qx = 0.0, float delta_qy = 0.0, float delta_qz = 0.0);
[native] int FCNPC_StopPlayingPlayback(npcid);
[native] int FCNPC_PausePlayingPlayback(npcid);
[native] int FCNPC_ResumePlayingPlayback(npcid);
[native] int FCNPC_LoadPlayingPlayback(const file[]);
[native] int FCNPC_UnloadPlayingPlayback(recordid);
[native] int FCNPC_SetPlayingPlaybackPath(npcid, const path[]);
[native] int FCNPC_GetPlayingPlaybackPath(npcid, path[], const size = sizeof(path));

[native] int FCNPC_OpenNode(nodeid);
[native] int FCNPC_CloseNode(nodeid);
[native] bool FCNPC_IsNodeOpen(nodeid);
[native] int FCNPC_GetNodeType(nodeid);
[native] int FCNPC_SetNodePoint(nodeid, pointid);
[native] int FCNPC_GetNodePointPosition(nodeid, [out] float x, [out] float y, [out] float z);
[native] int FCNPC_GetNodePointCount(nodeid);
[native] int FCNPC_GetNodeInfo(nodeid, [out] vehnodes, [out] pednodes, [out] navinode);
[native] int FCNPC_PlayNode(npcid, nodeid, move_type = FCNPC_MOVE_TYPE_AUTO, float speed = FCNPC_MOVE_SPEED_AUTO, mode = FCNPC_MOVE_MODE_AUTO, float radius = 0.0, bool set_angle = true);
[native] int FCNPC_StopPlayingNode(npcid);
[native] int FCNPC_PausePlayingNode(npcid);
[native] int FCNPC_ResumePlayingNode(npcid);
[native] bool FCNPC_IsPlayingNode(npcid);
[native] bool FCNPC_IsPlayingNodePaused(npcid);

[native] int FCNPC_CreateMovePath();
[native] int FCNPC_DestroyMovePath(pathid);
[native] bool FCNPC_IsValidMovePath(pathid);
[native] int FCNPC_AddPointToMovePath(pathid, float x, float y, float z);
[native] int FCNPC_AddPointsToMovePath(pathid, float points[][3], const size = sizeof(points));
[native] int FCNPC_AddPointsToMovePath2(pathid, float points_x[], float points_y[], float points_z[], const size = sizeof(points_x));
[native] int FCNPC_RemovePointFromMovePath(pathid, pointid);
[native] bool FCNPC_IsValidMovePathPoint(pathid, pointid);
[native] int FCNPC_GetMovePathPoint(pathid, pointid, [out] float x, [out] float y, [out] float z);
[native] int FCNPC_GetNumberMovePathPoint(pathid);
[native] int FCNPC_GoByMovePath(npcid, pathid, pointid = 0, type = FCNPC_MOVE_TYPE_AUTO, float speed = FCNPC_MOVE_SPEED_AUTO, mode = FCNPC_MOVE_MODE_AUTO, pathfinding = FCNPC_MOVE_PATHFINDING_AUTO, float radius = 0.0, bool set_angle = true, float min_distance = 0.0);

[native] int FCNPC_SetMoveMode(npcid, mode);
[native] int FCNPC_GetMoveMode(npcid);
[native] int FCNPC_SetMinHeightPosCall(npcid, float height);
[native] float FCNPC_GetMinHeightPosCall(npcid);

[native] int FCNPC_ShowInTabListForPlayer(npcid, forplayerid);
[native] int FCNPC_HideInTabListForPlayer(npcid, forplayerid);
*/